"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCustomDomainTunnel = void 0;
const cloudflared_1 = require("cloudflared");
const __1 = require("../..");
const createCustomDomainTunnel = (cliConfig, PORT) => __awaiter(void 0, void 0, void 0, function* () {
    const { cfTunnelHostDomain, sessionId, cfTunnelNamespace } = cliConfig;
    const sessionName = sessionId.replace(/[^A-Z0-9]/ig, "_").toLowerCase();
    const tunnelName = `_owa_${sessionName}`;
    const FQDN = `${sessionName}${cfTunnelNamespace ? `.${cfTunnelNamespace}` : `_owa`}.${cfTunnelHostDomain}`;
    const hostname = `https://${FQDN}`;
    const target = `http://localhost:${PORT}`;
    const logData = (data) => __1.log.info(`CLOUDFLARE TUNNEL: ${typeof data === "object" ? Buffer.isBuffer(data) ? data.toString() : JSON.stringify(data, null, 2) : data}`);
    // simlpe helper function to convert child proc to a promise and log the output
    const cfp = (child) => {
        return new Promise((resolve, reject) => {
            var _a, _b;
            (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on('data', logData);
            (_b = child.stderr) === null || _b === void 0 ? void 0 : _b.on('data', logData);
            child.on('error', reject);
            child.on('exit', (code) => {
                if (code === 0) {
                    resolve(true);
                }
                else {
                    reject(`Exit code: ${code}`);
                }
            });
        });
    };
    __1.log.info(`Checking if tunnel ${tunnelName} exists...`);
    const tunnelExists = yield new Promise((resolve) => {
        const check = (data) => {
            logData(data.toString());
            return resolve(!data.toString().includes("error"));
        };
        const { child } = (0, cloudflared_1.tunnel)({ "info": tunnelName });
        child.stdout.once('data', check);
        child.stderr.once('data', check);
    });
    if (!tunnelExists) {
        __1.log.info("Tunnel does not exist, creating...");
        yield cfp((0, cloudflared_1.tunnel)({ "create": tunnelName }).child);
    }
    __1.log.info(`Routing traffic to the tunnel via URL ${FQDN}...`);
    yield cfp((0, cloudflared_1.tunnel)({ "route": "dns", "--overwrite-dns": null, [tunnelName]: FQDN }).child);
    const { connections, child, stop } = (0, cloudflared_1.tunnel)({
        "--url": target,
        "--hostname": hostname,
        "run": tunnelName
    });
    child.stdout.on('data', logData);
    // wait for the all 4 connections to be established
    const conns = yield Promise.all(connections);
    // show the connections
    __1.log.info(`Connections Ready! ${JSON.stringify(conns, null, 2)}`);
    return {
        url: hostname,
        connections,
        child,
        stop: () => __awaiter(void 0, void 0, void 0, function* () {
            stop();
            yield cfp((0, cloudflared_1.tunnel)({ "delete": tunnelName }).child);
        })
    };
});
exports.createCustomDomainTunnel = createCustomDomainTunnel;
